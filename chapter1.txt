Commands Git, GITHUB & Command Prompt / Terminal

Terminal:
1. Create a directory: mkdir <name>
2. Access a directory: cd <name>
3. List items of a directory: ls
    3.1. List hiden idems from a directory: ls -a
4. Create a file in a directory: touch <file_name>.<extension>
5. Open a file using a Visio: open -a /Applications/Visual\ Studio\ Code.app <file_name>.<extension>
6. Clear terminal: clear

GIT:
1. Initiate GIT: git init
2. Check records from GIT: git status
3. Add records on GIT: git add <file_name>.<extension>
    3.1. Add all records from a directory: git add .
4. Save records on GIT: git commit -m <"Name of the commit">
5. Check all commits log (author, date and commit name): git log
6. Check differences between local file and GIT file: git diff <file_name>.<extension>
7. Restore / Rollback the content from GIT file to local file: git checkout <file_name>.<extension>
8. Remove all files (.) from local git (staging): git rm --cached -r .
9. Create a file for managing which files you push/commit: touch .gitignore

GIT Branch:
1. Create a Branch (acting as feature/bug): git branch <name_of_branch>
2. Check all available branches: git branch
3. Select the branch where you want to do updates: git checkout <name_of_branch>



.gitignore:
1. You can mention the files you want to ignore (vertical list): secrets.txt
2. You can exclude an entire extension like: *.txt
3. You can use comments via # : #This is a comment
4. Templates: https://github.com/github/gitignore



GITHUB:
To work with github, you need to have an account on their website(github.com) and then you need to create your own repository.
After you get a link of your repository and necessary commands to post on it.

1. Create connection between local GIT and remote GITHUB: git remote add origin <repository_link>
2. Push local repository to remote repository: git push -u <remote_name> <branch_name>
* GIT Credential Manager must be installed link: https://github.com/git-ecosystem/git-credential-manager
** Make sure that Credential Helper is enable too using command: git config --global credential.helper manager

